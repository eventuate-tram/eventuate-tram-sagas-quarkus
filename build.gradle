buildscript {
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
    }
}


apply plugin: 'docker-compose'

allprojects {
    group = "io.eventuate.tram.sagas"
}

apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"

allprojects {

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    if (!project.name.endsWith("-bom")) {
      dependencies {
          api 'io.quarkus:quarkus-core'
          api 'io.quarkus.arc:arc'
          api 'io.quarkus:quarkus-arc-deployment'

          implementation enforcedPlatform("io.quarkus:quarkus-bom:${quarkusVersion}")
      }
    }
}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregated Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP

        destinationDir file("$buildDir/docs/javadoc")
    }

    task("aggregateJavaDocsJar", type: org.gradle.api.tasks.bundling.Jar, dependsOn: project.aggregateJavaDocs) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives project.aggregateJavaDocsJar
    }

}


dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_SAGA_VERSION", eventuateTramSagasImageVersion
    environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion

    mysqlAll {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
    }

    mssqlAll {
        projectName = null
        useComposeFiles = ["docker-compose-mssql.yml"]
    }

    postgresAll {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
    }
}
